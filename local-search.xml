<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>透过文明看历史-巴比伦历史</title>
    <link href="/2025/02/20/%E9%80%8F%E8%BF%87%E6%96%87%E6%98%8E%E7%9C%8B%E5%8E%86%E5%8F%B2-%E5%B7%B4%E6%AF%94%E4%BC%A6%E5%8E%86%E5%8F%B2/"/>
    <url>/2025/02/20/%E9%80%8F%E8%BF%87%E6%96%87%E6%98%8E%E7%9C%8B%E5%8E%86%E5%8F%B2-%E5%B7%B4%E6%AF%94%E4%BC%A6%E5%8E%86%E5%8F%B2/</url>
    
    <content type="html"><![CDATA[<p>透过文明6看巴比伦的历史</p><span id="more"></span><h1 id="系列介绍"><a href="#系列介绍" class="headerlink" title="系列介绍"></a>系列介绍</h1><p>本系列将通过文明六这款基于历史的游戏，给大家讲解这一个个文明后的历史背景和历史故事。并不是按时间什么的讲解，而是散的给大家补充一些知识。</p><p>来自我自己高中在班级公众号写的推文，重新发布到个人博客上。</p><h1 id="文明6介绍"><a href="#文明6介绍" class="headerlink" title="文明6介绍"></a>文明6介绍</h1><p><img src="/../img/640.jpeg" alt="图片"></p><p>《文明6》是Firaxis Games开发，2K发行的历史策略回合制游戏，游戏中玩家建立起一个帝国，并接受时间的考验。玩家将创建及带领自己的文明从石器时代迈向信息时代，并成为世界的领导者。在尝试建立起世界上赫赫有名的伟大文明的过程中，玩家将启动战争、实行外交、促进文化，同时正面对抗历史上的众多领袖。</p><p>上一期我们讲了秦始皇，今天我们继续来讲四大四大文明古国之古巴比伦。</p><p><img src="/../img/image-20250220215337123.png" alt="image-20250220215337123"></p><h1 id="透过文明看巴比伦汉谟拉比历史"><a href="#透过文明看巴比伦汉谟拉比历史" class="headerlink" title="透过文明看巴比伦汉谟拉比历史"></a>透过文明看巴比伦汉谟拉比历史</h1><p>汉谟拉比，是的巴比伦王国的第六任国王（约公元前1792年－前1750年（中年表）或前1728年－前1686年（短年表）在位）。</p><p>巴比伦指的是古巴比伦（约公元前1894年－约公元前1595年），位于美索不达米亚平原，距今约4000年，在这里的人们建立了国家，出现了王国。是为“四大文明古国”之一，处于两河流域。</p><p><img src="/../img/image-20250220215426160.png" alt="image-20250220215426160"></p><p><img src="/../img/image-20250220215431519.png" alt="image-20250220215431519"></p><p>我们通过上图的介绍，我们可以得到很多的信息：</p><h2 id="⌈你的金口玉言便是至高法典。你以法典作为行为准则，而你的帝国也将以此为镜⌋"><a href="#⌈你的金口玉言便是至高法典。你以法典作为行为准则，而你的帝国也将以此为镜⌋" class="headerlink" title="⌈你的金口玉言便是至高法典。你以法典作为行为准则，而你的帝国也将以此为镜⌋"></a>⌈你的金口玉言便是至高法典。你以法典作为行为准则，而你的帝国也将以此为镜⌋</h2><p><img src="/../img/image-20250220215456852.png" alt="image-20250220215456852"></p><p>很明显，这里的法典指的就是汉谟拉比法典。它是迄今已知世界上第一部较为完整的成文法典。法典刻在一块黑色石柱上。内容十分广泛，从中可以清晰地了解古巴比伦社会。从法典中可知，古巴比伦分为拥有公民权的自由民、无公民权的自由民和奴隶三个严格的社会等级。奴隶制度在古巴比伦相当发达。战俘是奴隶的主要来源，也有买卖奴隶的现象。家庭奴隶制是古巴比伦的一大特征，男性家长对奴隶有生杀予夺之权，对妻子儿女有绝对权威，在欠债时甚至可以将妻儿送去抵债。</p><p>同时，法典中有许多关于租赁、雇佣、交换、借贷等方面的规定，说明商品经济在古巴比伦比较活跃。《汉谟拉比法典》 是古巴比伦王国留给人类的宝贵文化遗产，表明人类社会的法制传统源远流长。</p><h2 id="⌈而你的帝国也将以此为镜。在你眼中，世界就是联盟、机遇和风险共同交织的一张复杂巨网⌋"><a href="#⌈而你的帝国也将以此为镜。在你眼中，世界就是联盟、机遇和风险共同交织的一张复杂巨网⌋" class="headerlink" title="⌈而你的帝国也将以此为镜。在你眼中，世界就是联盟、机遇和风险共同交织的一张复杂巨网⌋"></a>⌈而你的帝国也将以此为镜。在你眼中，世界就是联盟、机遇和风险共同交织的一张复杂巨网⌋</h2><p><img src="/../img/image-20250220215519729.png" alt="image-20250220215519729"></p><p><img src="/../img/image-20250220215528519.png" alt="image-20250220215528519"></p><p>我们之前说过尤里卡在文明六中是一种可以提升科技研究速度的东西，巴比伦的这条技能，就不单单是加速了，而是直接获得！</p><p>说到巴比伦，就不得不说他的科技了。</p><p>在巴比伦两位大帝统治下，巴比伦成为了第九辖区的首府。它同样也是学习和科技进步的中心。在波斯阿契美尼德期间，古巴比伦的天文和数学的艺术重获新生，繁荣发展。巴比伦的学者完成了星座图。这个城市是波斯帝国——当时已知世界最强大的势力的行政首都。它在这个地区扮演了长达两个多世纪的重要角色。许多已经做出的重要的考古发现让人对那个年代有了更好的理解。</p><p>说到巴比伦这个城市，就必须提到空中花园了。</p><p><img src="/../img/image-20250220215621535.png" alt="image-20250220215621535"></p><p>空中花园是唯一一个仍未找出正确位置的古代世界七大奇迹。现存的巴比伦文献皆没有提到这座花园，在巴比伦也没有发现明确的考古证据。空中花园据说采用立体造园手法，将花园放在四层平台之上，由沥青及砖块建成，平台由25米高的柱子支撑，并且有灌溉系统，奴隶不停地推动连系着齿轮的把手。园中种植各种花草树木，远看犹如花园悬在半空中。</p><p><img src="/../img/image-20250220215633813.png" alt="image-20250220215633813"></p><p>Ps:这里的城市发展速度指的是余粮增加15%，所以说其实这个奇观也没那么强。</p><h2 id="⌈构建帝国、谨慎权衡，然后一统美索不达米亚平原。⌋"><a href="#⌈构建帝国、谨慎权衡，然后一统美索不达米亚平原。⌋" class="headerlink" title="⌈构建帝国、谨慎权衡，然后一统美索不达米亚平原。⌋"></a>⌈构建帝国、谨慎权衡，然后一统美索不达米亚平原。⌋</h2><p><img src="/../img/image-20250220215654912.png" alt="image-20250220215654912"></p><p>虽然汉谟拉比经常外出参加军事行动，但他仍然保持着对国家的远程统治，这使他能够和迅速扩张的帝国保持紧密联系。在为期42年的统治结束时，他控制了整个美索不达米亚南部。巴比伦城被确立为帝国首都，成为了美索不达米亚平原财富和权力的中心。汉谟拉比时代之后，巴比伦被亚述人占领，他们也重塑了美索不达米亚平原的战争。亚述王提格拉特·帕拉沙尔三世组建了原本由征募农民组成的军队，并让不同单位承担不同的任务（如补给线、通讯、工程等）。此外，亚述军队使用铁制武器，而同时代的大多数人仍在使用青铜。亚述主力军团——突击部队的战斗力令人生畏。关于他们的描述，亚述国王们曾经在纪念碑上反复提及：“我大肆摧毁、大肆破坏，然后一把火烧成灰烬。”</p><h2 id="⌈沟渠⌋"><a href="#⌈沟渠⌋" class="headerlink" title="⌈沟渠⌋"></a>⌈沟渠⌋</h2><p><img src="/../img/image-20250220215721884.png" alt="image-20250220215721884"></p><p><img src="/../img/image-20250220215724700.png" alt="image-20250220215724700"></p><p>美索不达米亚平原和水有着极为复杂的关系。在干旱沙漠及洪水频发底格里斯河与幼发拉底河之间，巴比伦人必须学习如何控制他们的河流。不但要控制，还要引导水流通过小型运河来灌溉精美别致的花园。虽然巴比伦空中花园并没有像历史学家们所希望的那样得到很好的记载，但亚述国王辛那赫里布的确借助水渠和精巧的运河在尼尼微建造了豪华的花园。这些水道通常拥有不同的点，穿过山脉、越过峡谷，让乌木和紫檀等异域树木得以在宫殿内生长。这些水道由大型石灰石砌块加固，并由专门的闸门控制。国王对这一切感到深深的自豪，他在泥板上刻着：“在深深的沟壑之上，我建起了一座白石桥。这些水流在下方遄遄流过。”在20世纪，伊拉克的雅兹迪族仍然沿袭着修建精巧的水渠和运河的传统。</p><h2 id="巴比伦的灭亡"><a href="#巴比伦的灭亡" class="headerlink" title="巴比伦的灭亡"></a>巴比伦的灭亡</h2><p>和公元前500年的许多其他地区一样，巴比伦也落入了波斯的居鲁士大帝之手。在居鲁士二世和大流士一世的统治下，巴比伦成为了第九行省的首府，同时也被定为波斯帝国的行政首都。它再次成为了一个学者和艺术家趋之若鹜的城市。两百年来，这座城市欣欣向荣。然而，随着时间的推移，这座城市发生了叛乱。原因是税收不断增加，但民生的改良却乏善可陈。</p><h1 id="额外内容（"><a href="#额外内容（" class="headerlink" title="额外内容（"></a>额外内容（</h1><p>众所周知啊，文明六并不是竞技游戏，所以说毫无平衡可言，本期说到的巴比伦，就是一个纯纯的 开 纪 文明。</p><p><img src="/../img/image-20250220215815210.png" alt="image-20250220215815210"></p><p>恐怖就恐怖在这一条，也就是可以无视科技树的先后科技，可以直接跳跃研究！你甚至可以在没用印刷术的情况下制造飞机！这导致了他的玩法多种多样，这里就介绍一个最无脑逆天的征服打法。</p><p><img src="/../img/image-20250220215826632.png" alt="image-20250220215826632"></p><p>Ok我们随机开张图啊，我们就座糖吧。</p><p><img src="/../img/image-20250220215836640.png" alt="image-20250220215836640"></p><p>我们发现啊，侦察兵和主力军团都是3t，移动力都是3，主力军团有加力，明显造主力军团好！（排除时代分影响）</p><p><img src="/../img/image-20250220215848131.png" alt="image-20250220215848131"></p><p>因为其他地方没什么树啊，我这边直接座了一个海城，接下来就可以准备外星人入侵了。感觉没什么好地，就直接远古两城开了。</p><p><img src="/../img/image-20250220215859568.png" alt="image-20250220215859568"></p><p><img src="/../img/image-20250220215902917.png" alt="image-20250220215902917"></p><p>这边用建造者开了三个矿区，直接远古学徒，然后两座城直接造工业区，由于汉谟拉比的技能，工业区直接获得工作坊。然后一分直接老马砍出工业区+工作坊，直接工业化。</p><p><img src="/../img/image-20250220215911964.png" alt="image-20250220215911964"></p><p><img src="/../img/image-20250220215916571.png" alt="image-20250220215916571"></p><p>这个时候我们已经在公元前1840年开启了工业时代（外星人入侵了属于是）</p><p><img src="/../img/image-20250220215923658.png" alt="image-20250220215923658"></p><p>接下来就是砍砍砍砍出工厂和煤炭发电厂，直接过精炼。</p><p><img src="/../img/image-20250220215930333.png" alt="image-20250220215930333"></p><p>此时是公元前1100年，我们的汉谟拉比已经进入现代了。</p><p><img src="/../img/image-20250220215939101.png" alt="image-20250220215939101"></p><p>这个时候发现上面有石油，马上出个开拓者去圈石油。</p><p><img src="/../img/image-20250220215948455.png" alt="image-20250220215948455"></p><p>随便座了，反正只是为了一个尤里卡，寨子都不清了</p><p><img src="/../img/image-20250220215955355.png" alt="image-20250220215955355"></p><p><img src="/../img/image-20250220215958362.png" alt="image-20250220215958362"></p><p>这个时候直接解锁塑料，获得我们的主角：特种部队。</p><p><img src="/../img/image-20250220220004695.png" alt="image-20250220220004695"></p><p>这可是拥有65远程攻击力的 原子能 单位！直接嘎嘎乱杀，要知道这个时候隔壁还在马镫呢！</p><p><img src="/../img/image-20250220220014436.png" alt="image-20250220220014436"></p><p>直接嘎嘎乱杀，手撕城墙！公元前350年的特种部队！</p><p><img src="/../img/image-20250220220026374.png" alt="image-20250220220026374"></p><p>最后在公元前使用特种部队获得了胜利……</p>]]></content>
    
    
    
    <tags>
      
      <tag>历史</tag>
      
      <tag>文明6</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>透过文明看历史-秦朝秦始皇</title>
    <link href="/2024/12/23/%E9%80%8F%E8%BF%87%E6%96%87%E6%98%8E%E7%9C%8B%E5%8E%86%E5%8F%B2-%E7%A7%A6%E6%9C%9D%E7%A7%A6%E5%A7%8B%E7%9A%87/"/>
    <url>/2024/12/23/%E9%80%8F%E8%BF%87%E6%96%87%E6%98%8E%E7%9C%8B%E5%8E%86%E5%8F%B2-%E7%A7%A6%E6%9C%9D%E7%A7%A6%E5%A7%8B%E7%9A%87/</url>
    
    <content type="html"><![CDATA[<p>透过文明6看秦朝秦始皇的历史</p><span id="more"></span><h1 id="系列介绍"><a href="#系列介绍" class="headerlink" title="系列介绍"></a>系列介绍</h1><p>本系列将通过文明六这款基于历史的游戏，给大家讲解这一个个文明后的历史背景和历史故事。并不是按时间什么的讲解，而是散的给大家补充一些知识。</p><p>来自我自己高中在班级公众号写的推文，重新发布到个人博客上。</p><h1 id="文明6介绍"><a href="#文明6介绍" class="headerlink" title="文明6介绍"></a>文明6介绍</h1><p><img src="/../img/image-20241223203838892.png" alt="image-20241223203838892"></p><p>《文明6》是Firaxis Games开发，2K发行的历史策略回合制游戏，游戏中玩家建立起一个帝国，并接受时间的考验。玩家将创建及带领自己的文明从石器时代迈向信息时代，并成为世界的领导者。在尝试建立起世界上赫赫有名的伟大文明的过程中，玩家将启动战争、实行外交、促进文化，同时正面对抗历史上的众多领袖。</p><h1 id="透过文明看秦朝历史"><a href="#透过文明看秦朝历史" class="headerlink" title="透过文明看秦朝历史"></a>透过文明看秦朝历史</h1><p><img src="/../img/image-20241223203919521.png" alt="image-20241223203919521"><img src="/../img/image-20241223203923849.png" alt="image-20241223203923849"></p><p>秦始皇嬴政（前259年—前210年）中国历史上著名的政治家、战略家、改革家，完成华夏大一统的铁腕政治人物，也是中国第一个称皇帝的君主。</p><p>我们通过上图的介绍，我们可以得到很多的信息：</p><h2 id="⌈您统一了中国⌋"><a href="#⌈您统一了中国⌋" class="headerlink" title="⌈您统一了中国⌋"></a>⌈您统一了中国⌋</h2><p><img src="/../img/image-20241223204004697.png" alt="image-20241223204004697"></p><p>众所周知，秦前是春秋战国时期，长期的战乱给社会带来巨大灾难，人们渴望安定统一。各地域经济的发展，要求打破政治分裂所带来的阻碍。这为统一准备了客观条件。</p><p>对于秦本身来讲，主要是因为以下几点：</p><ul><li>地利：地理位置优越，物质基础丰富。</li><li>人和：历代秦王励精图治，广纳贤才，吏治较为清明。商鞅变法后，秦尊法家，奖励耕战，国家日益强盛。</li></ul><p><img src="/../img/image-20241223204029495.png" alt="image-20241223204029495"></p><p>在文明六秦朝的特性中，有一条尤里卡和鼓舞的提升，不了解文明六的就可以把这两个东西就可以理解为科技和文化。换句话说，就是秦朝的科技和文化发展速度快。</p><p>我们对应上历史来说，秦朝在统一了以后，首先在政治上，在中央设立的三公九卿制，在地方设立的郡县制，大大加强的中央集权。秦朝确立的政治制度被以后的王朝长期沿用，影响深远。</p><p><img src="/../img/image-20241223204045131.png" alt="image-20241223204045131"></p><p>其次从科技经济上，秦朝统一了文字、车轨、货币、度量衡，这些让秦朝的科技经济有一定的快速提升。</p><h2 id="⌈世界各地的问都来瞻仰长城⌋"><a href="#⌈世界各地的问都来瞻仰长城⌋" class="headerlink" title="⌈世界各地的问都来瞻仰长城⌋"></a>⌈世界各地的问都来瞻仰长城⌋</h2><p>在文明六中，秦朝有一种“长城”特色建筑。</p><p><img src="/../img/image-20241223204106655.png" alt="image-20241223204106655"></p><p><img src="/../img/image-20241223204114040.png" alt="image-20241223204114040"></p><p>公元前221年秦统一六国后，为了防御匈奴，秦始皇32年（前215年）在北方大规模修筑长城。秦长城实际是在原先战国时期秦长城，赵长城，燕长城三国长城的基础上修建。西起临洮(今甘肃岷县)、东至鸭绿江(今辽宁省的东部和南部及吉林省的东南部地区)共筑万余里,故史称：“万里长城”。</p><p>可以看到，文明六中长城最主要的是增加攻击力，这也不难理解，毕竟长城是来抵御外敌的。</p><p><img src="/../img/image-20241223204125451.png" alt="image-20241223204125451"></p><p>其次，可以看到文明中的长城还可以增加文化和金币，这是因为长城除了军事作用外，在客观上也起到了经贸，交流等作用。长城带古代的经济、文化结构与古代民族的构成格局，决定了中国古代农业经济地区与畜牧业经济地区的关系集中表现于长城一线，其农业经济、文化与畜牧业经济、文化的对立统一也沿长城一线展开。</p><p>我们还可以看到，长城还增加了旅游业绩。长城作为文化遗址，“不到长城非好汉，当然会吸引很多的游客，2022年10月，文化和旅游部发布了8条长城主题国家级旅游线路和62条长城主题精品线路，全面展现长城沿线文物和文化资源，生动呈现万里长城之美。</p><h2 id="⌈人们辛苦劳作，很快修建了世上最让人震撼的建筑，但愿他们手上永远没有水泡⌋"><a href="#⌈人们辛苦劳作，很快修建了世上最让人震撼的建筑，但愿他们手上永远没有水泡⌋" class="headerlink" title="⌈人们辛苦劳作，很快修建了世上最让人震撼的建筑，但愿他们手上永远没有水泡⌋"></a>⌈人们辛苦劳作，很快修建了世上最让人震撼的建筑，但愿他们手上永远没有水泡⌋</h2><p>这还可以对以上文明中他的一个技能：可以消耗工人增加奇观进度。</p><p><img src="/../img/image-20241223204141200.png" alt="image-20241223204141200"></p><p>完成统一后的秦始皇，穷奢极欲，大兴土木，建造宫殿、陵墓。</p><p><img src="/../img/image-20241223204152898.png" alt="image-20241223204152898"></p><p>最典型的就是兵马俑。秦始皇即位（时年13岁）后便开始兴建自己的陵墓（包括兵马俑），具体时间应为公元前246年或前247年。 秦始皇陵修建过程经其一生，历时39年，于公元前208年建成。消耗了大量的人力物力。这为秦朝的灭亡埋下了隐患。</p><h2 id="秦朝的灭亡"><a href="#秦朝的灭亡" class="headerlink" title="秦朝的灭亡"></a>秦朝的灭亡</h2><p>除了上面说的大兴土木以外，秦朝残忍的专制：严刑峻法、焚书坑儒导致了秦朝的速亡。</p>]]></content>
    
    
    
    <tags>
      
      <tag>历史</tag>
      
      <tag>文明6</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Qt如何给程序添加系统托盘</title>
    <link href="/2024/11/19/Qt%E5%A6%82%E4%BD%95%E7%BB%99%E7%A8%8B%E5%BA%8F%E6%B7%BB%E5%8A%A0%E7%B3%BB%E7%BB%9F%E6%89%98%E7%9B%98/"/>
    <url>/2024/11/19/Qt%E5%A6%82%E4%BD%95%E7%BB%99%E7%A8%8B%E5%BA%8F%E6%B7%BB%E5%8A%A0%E7%B3%BB%E7%BB%9F%E6%89%98%E7%9B%98/</url>
    
    <content type="html"><![CDATA[<p>介绍一下如何给Qt程序做一个系统托盘</p><span id="more"></span><h1 id="简单介绍"><a href="#简单介绍" class="headerlink" title="简单介绍"></a>简单介绍</h1><p><img src="/../img/image-20241119194056367.png" alt="image-20241119194056367"></p><h1 id="开始制作"><a href="#开始制作" class="headerlink" title="开始制作"></a>开始制作</h1><h2 id="添加托盘"><a href="#添加托盘" class="headerlink" title="添加托盘"></a>添加托盘</h2><p>使用到了QSystemTrayIcon类，首先要在.h的private中创建一个：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs C++">QSystemTrayIcon *m_sysTrayIcon; <span class="hljs-comment">//系统托盘</span><br></code></pre></td></tr></table></figure><p>然后在cpp中实现</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs C++">m_sysTrayIcon = <span class="hljs-keyword">new</span> <span class="hljs-built_in">QSystemTrayIcon</span>(<span class="hljs-keyword">this</span>); <span class="hljs-comment">//新建QSystemTrayIcon对象</span><br>QIcon icon = <span class="hljs-built_in">QIcon</span>(<span class="hljs-string">&quot;:/img/img/logo.png&quot;</span>); <span class="hljs-comment">//资源文件添加的图标</span><br>m_sysTrayIcon-&gt;<span class="hljs-built_in">setIcon</span>(icon);<br></code></pre></td></tr></table></figure><p>这里设置图标要检查一下，如果设置失败的话不会报错，也不会显示托盘</p><p>接着，就可以给托盘图标添加事件了</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-built_in">connect</span>(m_sysTrayIcon, &amp;QSystemTrayIcon::activated, <span class="hljs-comment">//给QSystemTrayIcon添加槽函数</span><br>        [=](QSystemTrayIcon::ActivationReason reason)<br>        &#123;<br>            <span class="hljs-keyword">switch</span>(reason)<br>            &#123;<br>            <span class="hljs-keyword">case</span> QSystemTrayIcon::Trigger: <span class="hljs-comment">//单击托盘图标</span><br>                <span class="hljs-comment">//单击事件</span><br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">case</span> QSystemTrayIcon::DoubleClick: <span class="hljs-comment">//双击托盘图标</span><br>                <span class="hljs-comment">//双击事件</span><br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">default</span>:<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>        &#125;);<br></code></pre></td></tr></table></figure><h2 id="添加托盘菜单"><a href="#添加托盘菜单" class="headerlink" title="添加托盘菜单"></a>添加托盘菜单</h2><p>也就是右击托盘图标会显示的菜单，使用到了QMenu，先.h中创建：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs C++">QMenu *m_menu; <span class="hljs-comment">//菜单</span><br></code></pre></td></tr></table></figure><p>然后再cpp中实现</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs C++">m_menu = <span class="hljs-keyword">new</span> <span class="hljs-built_in">QMenu</span>(<span class="hljs-keyword">this</span>);<br>m_sysTrayIcon-&gt;<span class="hljs-built_in">setContextMenu</span>(m_menu); <span class="hljs-comment">//把QMenu赋给QSystemTrayIcon对象</span><br></code></pre></td></tr></table></figure><h2 id="添加菜单项"><a href="#添加菜单项" class="headerlink" title="添加菜单项"></a>添加菜单项</h2><p>我们有了菜单，但是菜单里没东西是不行的，使用QAction来添加动作，这里做一个显示主界面和退出程序的示例。</p><p>还是一样.h中添加：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs C++">QAction *m_showMainAction; <span class="hljs-comment">//显示主界面</span><br>QAction *m_exitAppAction; <span class="hljs-comment">//退出程序</span><br></code></pre></td></tr></table></figure><p>然后在上面的QMenu赋值到Icon前，加入</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs C++">m_showMainAction = <span class="hljs-keyword">new</span> <span class="hljs-built_in">QAction</span>(<span class="hljs-string">&quot;主界面&quot;</span>, <span class="hljs-keyword">this</span>);<br>m_exitAppAction = <span class="hljs-keyword">new</span> <span class="hljs-built_in">QAction</span>(<span class="hljs-string">&quot;退出&quot;</span>, <span class="hljs-keyword">this</span>);<br>m_menu-&gt;<span class="hljs-built_in">addAction</span>(m_showMainAction); <span class="hljs-comment">//新增菜单项---显示主界面</span><br>m_menu-&gt;<span class="hljs-built_in">addAction</span>(m_exitAppAction); <span class="hljs-comment">//新增菜单项---退出程序</span><br></code></pre></td></tr></table></figure><p>当然我们有了按钮还不行，还要给按钮添加事件</p><p>private slots中添加：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">on_showMainAction</span><span class="hljs-params">()</span></span>; <span class="hljs-comment">//打开主界面</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">on_exitAppAction</span><span class="hljs-params">()</span></span>; <span class="hljs-comment">//退出程序</span><br></code></pre></td></tr></table></figure><p>记得实现</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-comment">//托盘主界面</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">MainWindow::on_showMainAction</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">this</span>-&gt;<span class="hljs-built_in">show</span>();<br>&#125;<br><span class="hljs-comment">//托盘推出</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">MainWindow::on_exitAppAction</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    qApp-&gt;<span class="hljs-built_in">exit</span>();<br>&#125;<br></code></pre></td></tr></table></figure><p>当然，还要连接一下信号和槽</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-built_in">connect</span>(m_showMainAction,<span class="hljs-built_in">SIGNAL</span>(<span class="hljs-built_in">triggered</span>()),<span class="hljs-keyword">this</span>,<span class="hljs-built_in">SLOT</span>(<span class="hljs-built_in">on_showMainAction</span>()));<br><span class="hljs-built_in">connect</span>(m_exitAppAction,<span class="hljs-built_in">SIGNAL</span>(<span class="hljs-built_in">triggered</span>()),<span class="hljs-keyword">this</span>,<span class="hljs-built_in">SLOT</span>(<span class="hljs-built_in">on_exitAppAction</span>()));<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>Qt</tag>
      
      <tag>C++</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>漫画如何嵌网点背景的对话框</title>
    <link href="/2024/11/07/%E6%BC%AB%E7%94%BB%E5%A6%82%E4%BD%95%E5%B5%8C%E7%BD%91%E7%82%B9%E8%83%8C%E6%99%AF%E7%9A%84%E5%AF%B9%E8%AF%9D%E6%A1%86/"/>
    <url>/2024/11/07/%E6%BC%AB%E7%94%BB%E5%A6%82%E4%BD%95%E5%B5%8C%E7%BD%91%E7%82%B9%E8%83%8C%E6%99%AF%E7%9A%84%E5%AF%B9%E8%AF%9D%E6%A1%86/</url>
    
    <content type="html"><![CDATA[<p>漫画嵌字中网点的对话框的处理</p><span id="more"></span><p>这个系列会记录一下嵌字的个人经验，如果有更好的方法可以评论区分享。</p><h1 id="问题介绍"><a href="#问题介绍" class="headerlink" title="问题介绍"></a>问题介绍</h1><p>在嵌字中我们会遇到这样的对话框</p><p><img src="/../img/image-20241107200053080.png" alt="image-20241107200053080"></p><p>对于这种对话框，我们应该如何处理呢？</p><h1 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h1><h2 id="方法1-使用仿制图章"><a href="#方法1-使用仿制图章" class="headerlink" title="方法1 使用仿制图章"></a>方法1 使用仿制图章</h2><ul><li>优点：方便快捷、和对原图破坏低</li><li>缺点：部分情况无法使用</li></ul><p>先在网点中找到重复区域，用距文字远的按住alt取基准点，移动到左边的区块直到完全重合。</p><p><img src="/../img/image-20241107200413889.png" alt="image-20241107200413889"></p><p>刚开始不熟练的时候可以把图章硬度调低，没对上的话会像下图一样雾蒙蒙的。</p><p><img src="/../img/image-20241107200825398.png" alt="image-20241107200825398"></p><p>对上的话会是非常完美的，非常明显。然后就是往文字上涂了。</p><p><img src="/../img/image-20241107201020327.png" alt="image-20241107201020327"></p><p>对于这种留空比较大的还行，但是如果遇到留空比较小的，比如下图就非常难涂了，这个时候就要把网点重做。</p><p><img src="/../img/image-20241107201137995.png" alt="image-20241107201137995"></p><h2 id="方法2-网点重做"><a href="#方法2-网点重做" class="headerlink" title="方法2 网点重做"></a>方法2 网点重做</h2><ul><li>优点：通用性强，适合覆盖区域大的文本框</li><li>缺点：比较费时</li></ul><p>所谓网点重做，就是自己重新画网点上去。</p><p>首先，我们要先搞到网点素材，你可以先找到一片网点比较大的区域并选取重复的区域：</p><p><img src="/../img/image-20241107201737812.png" alt="image-20241107201737812"></p><p>可以看到，左上角和右下角的区块是明显重复的，把重复的整个区块（上图粉色的）选中，复制拼接到左右，发现是无缝拼接的，这就是找到了重复区块，整个就可以当作网点素材添加到图案。</p><p><img src="/../img/image-20241107201914824.png" alt="image-20241107201914824"></p><p>有了素材后，我们就可以进行重做网点了，先框选对话框，可以用自己喜欢的方式，区域画笔、快速选择、框选都是可以的。我比较喜欢快速选择+区域画笔微调：</p><p><img src="/../img/image-20241107202041415.png" alt="image-20241107202041415"></p><p>接着就可以进行图案填充了，当然你愿意用图章画也是可以的</p><p><img src="/../img/image-20241107202208912.png" alt="image-20241107202208912"></p><p><img src="/../img/image-20241107202414428.png" alt="image-20241107202414428"></p><h2 id="方法3-网点素材-仿制图章"><a href="#方法3-网点素材-仿制图章" class="headerlink" title="方法3 网点素材+仿制图章"></a>方法3 网点素材+仿制图章</h2><p>其实就是两者的结合，把素材放在旁边，然后用仿制图章盖上去，这样子可以最大限度减少对原图的破坏</p><p><img src="/../img/image-20241107202536923.png" alt="image-20241107202536923"></p>]]></content>
    
    
    
    <tags>
      
      <tag>漫画嵌字</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>在Qt6中截取视频帧图片</title>
    <link href="/2024/11/04/%E5%9C%A8Qt%E4%B8%AD%E6%88%AA%E5%8F%96%E8%A7%86%E9%A2%91%E5%B8%A7%E5%9B%BE%E7%89%87/"/>
    <url>/2024/11/04/%E5%9C%A8Qt%E4%B8%AD%E6%88%AA%E5%8F%96%E8%A7%86%E9%A2%91%E5%B8%A7%E5%9B%BE%E7%89%87/</url>
    
    <content type="html"><![CDATA[<p>导入一个视频文件并截取某一帧</p><span id="more"></span><h1 id="简单介绍"><a href="#简单介绍" class="headerlink" title="简单介绍"></a>简单介绍</h1><p>Qt 6的Qt Multimedia模块替换了Qt 5.x的Qt Multimedia模块。使用Qt 5的Qt Multimedia的现有代码可以通过有限的努力进行移植。</p><p>也就是可以用QVideoSink来获取视频单帧了</p><h1 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h1><p>引入Multimedia</p><p>CMake示例：</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs cmake"><span class="hljs-keyword">find_package</span>(Qt<span class="hljs-variable">$&#123;QT_VERSION_MAJOR&#125;</span> REQUIRED COMPONENTS Widgets Multimedia)<br><span class="hljs-keyword">target_link_libraries</span>(QtTest PRIVATE Qt<span class="hljs-variable">$&#123;QT_VERSION_MAJOR&#125;</span>::Widgets Qt6::Multimedia)<br></code></pre></td></tr></table></figure><p>需要引用的头文件</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;QMediaPlayer&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;QVideoSink&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;QVideoFrame&gt;</span></span><br></code></pre></td></tr></table></figure><h1 id="使用教程"><a href="#使用教程" class="headerlink" title="使用教程"></a>使用教程</h1><h2 id="获取单帧"><a href="#获取单帧" class="headerlink" title="获取单帧"></a>获取单帧</h2><p>.h private添加</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs C++">QMediaPlayer* m_player = <span class="hljs-literal">nullptr</span>;<br></code></pre></td></tr></table></figure><p>.cpp使用样例</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;mainwindow.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;./ui_mainwindow.h&quot;</span></span><br><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;QFileDialog&gt;</span></span><br><br>MainWindow::<span class="hljs-built_in">MainWindow</span>(QWidget *parent)<br>    : <span class="hljs-built_in">QMainWindow</span>(parent)<br>    , <span class="hljs-built_in">ui</span>(<span class="hljs-keyword">new</span> Ui::MainWindow)<br>&#123;<br>    ui-&gt;<span class="hljs-built_in">setupUi</span>(<span class="hljs-keyword">this</span>);<br>    m_player = <span class="hljs-keyword">new</span> <span class="hljs-built_in">QMediaPlayer</span>(<span class="hljs-keyword">this</span>);<br>&#125;<br>MainWindow::~<span class="hljs-built_in">MainWindow</span>()<br>&#123;<br>    <span class="hljs-keyword">delete</span> ui;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">MainWindow::on_pushButton_clicked</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    QVideoSink* videoSink = <span class="hljs-keyword">new</span> <span class="hljs-built_in">QVideoSink</span>(<span class="hljs-keyword">this</span>);<br>    m_player-&gt;<span class="hljs-built_in">setVideoOutput</span>(videoSink);<br>    <span class="hljs-comment">//加载视频文件</span><br>    QString str = QFileDialog::<span class="hljs-built_in">getOpenFileName</span>();<br>    m_player-&gt;<span class="hljs-built_in">setSource</span>(<span class="hljs-built_in">QUrl</span>(str));<br>    <span class="hljs-comment">//连接 QVideoSink 的 videoFrameChanged 信号</span><br>    <span class="hljs-built_in">connect</span>(videoSink, &amp;QVideoSink::videoFrameChanged, [&amp;](<span class="hljs-type">const</span> QVideoFrame &amp;frame) &#123;<br>        <span class="hljs-comment">//获取帧时间戳</span><br>            m_player-&gt;<span class="hljs-built_in">setPosition</span>(<span class="hljs-number">5000</span>);<br>            QImage image = frame.<span class="hljs-built_in">toImage</span>(); <span class="hljs-comment">//将 QVideoFrame 转换为 QImage</span><br>            image.<span class="hljs-built_in">save</span>(<span class="hljs-string">&quot;screenshot_at_5_seconds.png&quot;</span>); <span class="hljs-comment">//保存图片</span><br>            m_player-&gt;<span class="hljs-built_in">stop</span>(); <span class="hljs-comment">// 停止播放</span><br>        &#125;<br>    &#125;);<br>    <span class="hljs-comment">// 开始播放视频</span><br>    m_player-&gt;<span class="hljs-built_in">play</span>();<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="获取多帧"><a href="#获取多帧" class="headerlink" title="获取多帧"></a>获取多帧</h2><p>.h中添加loop</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs C++">QEventLoop loop;<br></code></pre></td></tr></table></figure><p>如果需要循环获取，可以使用loop进行局部循环</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-comment">//循环七秒</span><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt;= m_player-&gt;<span class="hljs-built_in">duration</span>(); i += <span class="hljs-number">7000</span>)<br>&#123;<br>    m_player-&gt;<span class="hljs-built_in">setPosition</span>(i);<br>    <span class="hljs-comment">//使用局部事件循环等待帧捕获</span><br>    <span class="hljs-type">bool</span> frameCaptured = <span class="hljs-literal">false</span>;<br>    <span class="hljs-comment">//连接视频帧捕获的信号</span><br>    <span class="hljs-built_in">connect</span>(videoSink, &amp;QVideoSink::videoFrameChanged, <span class="hljs-keyword">this</span>, [&amp;](<span class="hljs-type">const</span> QVideoFrame &amp;frame) <span class="hljs-keyword">mutable</span> &#123;<br>        <span class="hljs-keyword">if</span> (!frameCaptured &amp;&amp; frame.<span class="hljs-built_in">isValid</span>()) &#123;<br>            frameCaptured = <span class="hljs-literal">true</span>; <span class="hljs-comment">//第一次捕获后设置为 true</span><br>            QImage image = frame.<span class="hljs-built_in">toImage</span>();<br>            ui-&gt;label-&gt;<span class="hljs-built_in">setPixmap</span>(QPixmap::<span class="hljs-built_in">fromImage</span>(image));<br>            <span class="hljs-keyword">if</span> (!image.<span class="hljs-built_in">isNull</span>()) &#123;<br>                <span class="hljs-comment">//保存图像为 jpg</span><br>                image.<span class="hljs-built_in">save</span>(QString::<span class="hljs-built_in">number</span>(i) + <span class="hljs-string">&quot;.jpg&quot;</span>, <span class="hljs-string">&quot;JPG&quot;</span>);<br>            &#125;<br>            <span class="hljs-comment">//断开信号，停止等待</span><br>            <span class="hljs-built_in">disconnect</span>(videoSink, &amp;QVideoSink::videoFrameChanged, <span class="hljs-keyword">this</span>, <span class="hljs-literal">nullptr</span>);<br>        &#125;<br>    &#125;);<br>    <span class="hljs-comment">//开启局部事件循环，等待帧捕获完成</span><br>    loop.<span class="hljs-built_in">exec</span>();<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>Qt</tag>
      
      <tag>C++</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>在Qt中使用http的get和post请求</title>
    <link href="/2024/10/28/%E5%9C%A8Qt%E4%B8%AD%E4%BD%BF%E7%94%A8get%E5%92%8Cpost%E8%AF%B7%E6%B1%82/"/>
    <url>/2024/10/28/%E5%9C%A8Qt%E4%B8%AD%E4%BD%BF%E7%94%A8get%E5%92%8Cpost%E8%AF%B7%E6%B1%82/</url>
    
    <content type="html"><![CDATA[<p>如何在Qt中发送get和post请求</p><span id="more"></span><h1 id="简单介绍"><a href="#简单介绍" class="headerlink" title="简单介绍"></a>简单介绍</h1><p>超文本传输协议（HTTP）的设计目的是保证客户端与服务器之间的通信。</p><p>HTTP 的工作方式是客户端与服务器之间的请求-应答协议。</p><p>web 浏览器可能是客户端，而计算机上的网络应用程序也可能作为服务器端。</p><p>举例：客户端（浏览器）向服务器提交 HTTP 请求；服务器向客户端返回响应。响应包含关于请求的状态信息以及可能被请求的内容。</p><p>两种 HTTP 请求方法：GET 和 POST<br>在客户机和服务器之间进行请求-响应时，两种最常被用到的方法是：GET 和 POST。</p><p>GET - 从指定的资源请求数据。<br>POST - 向指定的资源提交要被处理的数据。<br>GET 提交参数一般显示在 URL 上，POST 通过表单提交不会显示在 URL 上，POST 更具隐蔽性：</p><h1 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h1><p>你需要现在工程中加入Network相关内容</p><p>CMake示例：</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs cmake"><span class="hljs-keyword">find_package</span>(Qt6 COMPONENTS Network REQUIRED)<br><span class="hljs-keyword">target_link_libraries</span>(ZcAnimeDanmuTool PRIVATE Qt6::Network)<br></code></pre></td></tr></table></figure><p>然后再.h中添加</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;QNetworkAccessManager&gt;</span></span><br></code></pre></td></tr></table></figure><p>并且再private中声明一个manager</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c++">QNetworkAccessManager *m_manager;<br></code></pre></td></tr></table></figure><h1 id="使用教程"><a href="#使用教程" class="headerlink" title="使用教程"></a>使用教程</h1><h2 id="get请求"><a href="#get请求" class="headerlink" title="get请求"></a>get请求</h2><p>直接使用了loop的方法，简单粗暴地演示一下</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs c++">m_manager = <span class="hljs-keyword">new</span> <span class="hljs-built_in">QNetworkAccessManager</span>(<span class="hljs-keyword">this</span>); <span class="hljs-comment">//新建QNetworkAccessManager对象</span><br>QEventLoop loop; <span class="hljs-comment">//循环</span><br>QNetworkReply *reply = m_manager-&gt;<span class="hljs-built_in">get</span>(<span class="hljs-built_in">QNetworkRequest</span>(<span class="hljs-built_in">QUrl</span>(<span class="hljs-string">&quot;url&quot;</span>))); <span class="hljs-comment">//这里是请求网址</span><br><span class="hljs-built_in">connect</span>(reply, <span class="hljs-built_in">SIGNAL</span>(<span class="hljs-built_in">finished</span>()), &amp;loop, <span class="hljs-built_in">SLOT</span>(<span class="hljs-built_in">quit</span>())); <span class="hljs-comment">//绑定回复事件</span><br>loop.<span class="hljs-built_in">exec</span>(); <span class="hljs-comment">//循环直到有回复</span><br>QString read = reply-&gt;<span class="hljs-built_in">readAll</span>();<br>reply-&gt;<span class="hljs-built_in">deleteLater</span>(); <span class="hljs-comment">//释放内存</span><br></code></pre></td></tr></table></figure><p>最后这个read就是返回内容了，一般是json，需要继续处理</p><h2 id="post请求"><a href="#post请求" class="headerlink" title="post请求"></a>post请求</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs C++">QNetworkAccessManager* naManager = <span class="hljs-keyword">new</span> <span class="hljs-built_in">QNetworkAccessManager</span>(<span class="hljs-keyword">this</span>);<br>QNetworkRequest request;<br><span class="hljs-comment">//头设置</span><br>request.<span class="hljs-built_in">setUrl</span>(<span class="hljs-built_in">QUrl</span>(<span class="hljs-string">&quot;url&quot;</span>)); <span class="hljs-comment">//这里是请求网址</span><br>request.<span class="hljs-built_in">setHeader</span>(QNetworkRequest::ContentTypeHeader, <span class="hljs-built_in">QVariant</span>(<span class="hljs-string">&quot;application/json&quot;</span>)); <span class="hljs-comment">//这是一个设置头的示例</span><br><span class="hljs-comment">//内容设置</span><br>QJsonObject jsonObj;<br><span class="hljs-comment">/*此处需要根据情况编写json内容*/</span><br><span class="hljs-function">QJsonDocument <span class="hljs-title">jsonDoc</span><span class="hljs-params">(jsonObj)</span></span>;<br><span class="hljs-comment">//发送 POST 请求</span><br>QEventLoop loop;<br>QNetworkReply* reply = naManager-&gt;<span class="hljs-built_in">post</span>(request, jsonDoc.<span class="hljs-built_in">toJson</span>());<br><span class="hljs-built_in">connect</span>(reply, <span class="hljs-built_in">SIGNAL</span>(<span class="hljs-built_in">finished</span>()), &amp;loop, <span class="hljs-built_in">SLOT</span>(<span class="hljs-built_in">quit</span>()));<br>loop.<span class="hljs-built_in">exec</span>(); <span class="hljs-comment">//一样的循环</span><br>QString read;<br>read = reply-&gt;<span class="hljs-built_in">readAll</span>();<br>reply-&gt;<span class="hljs-built_in">deleteLater</span>(); <span class="hljs-comment">//记得释放内存</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>Qt</tag>
      
      <tag>C++</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>在Qt中ElaWidgetTools的基础使用</title>
    <link href="/2024/10/23/%E4%BD%BF%E7%94%A8ElaWidgetTools%E7%9A%84%E5%9F%BA%E7%A1%80%E4%BD%BF%E7%94%A8/"/>
    <url>/2024/10/23/%E4%BD%BF%E7%94%A8ElaWidgetTools%E7%9A%84%E5%9F%BA%E7%A1%80%E4%BD%BF%E7%94%A8/</url>
    
    <content type="html"><![CDATA[<p>介绍一下ElaWidgetTools的基础使用方法</p><span id="more"></span><h1 id="ElaWidgetTools介绍"><a href="#ElaWidgetTools介绍" class="headerlink" title="ElaWidgetTools介绍"></a>ElaWidgetTools介绍</h1><p>基于QT-Widget开发的FluentUI风格的组件库，同时提供不限于组件的常用集成功能；目前Main分支支持QT5.12以上所有版本(Linux为QT5.15以上)，推荐版本为QT6.4.3和QT6.6.2；</p><h1 id="在项目中使用"><a href="#在项目中使用" class="headerlink" title="在项目中使用"></a>在项目中使用</h1><h2 id="构建dll"><a href="#构建dll" class="headerlink" title="构建dll"></a>构建dll</h2><p><a href="https://github.com/Liniyous/ElaWidgetTools">ElaWidgetTools</a></p><p>Clone下来并使用QtCreater打开，项目是CMaker，所以说打开的是CMakeLists.txt</p><p><img src="/img/1.png" alt="1"></p><p>选择和你项目一致的版本，使用release构建</p><p>在根目录下即可得到elawidgettools.dll和elawidgettools.lib</p><h2 id="添加到自己项目"><a href="#添加到自己项目" class="headerlink" title="添加到自己项目"></a>添加到自己项目</h2><p>在项目文件夹中创建lib文件夹和include文件夹</p><p><img src="/img/2.png" alt="2"></p><p>把elawidgettools.dll和elawidgettools.lib放到lib文件夹</p><p>把ElaWidgetTools-main\src\include中的文件放到include文件夹</p><p>接下来打开自己项目的cmakelists</p><p>首先要把include文件夹包含进来</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs cmake"><span class="hljs-keyword">include_directories</span>(<br>    <span class="hljs-keyword">include</span><br>)<br></code></pre></td></tr></table></figure><p>然后再add_executable中添加qrc</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmake"><span class="hljs-keyword">include</span>/ElaWidgetTools.qrc<br></code></pre></td></tr></table></figure><p>最后链接目标库，再target_link_libraries中添加</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmake"><span class="hljs-variable">$&#123;CMAKE_CURRENT_SOURCE_DIR&#125;</span>/lib/elawidgettools.lib<br></code></pre></td></tr></table></figure><p>大功告成，这是完整的cmakelist示例仅供参考：</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs cmake"><span class="hljs-keyword">cmake_minimum_required</span>(VERSION <span class="hljs-number">3.16</span>)<br><br><span class="hljs-keyword">project</span>(<span class="hljs-keyword">Test</span> VERSION <span class="hljs-number">0.1</span> LANGUAGES CXX)<br><br><span class="hljs-keyword">set</span>(CMAKE_AUTOUIC <span class="hljs-keyword">ON</span>)<br><span class="hljs-keyword">set</span>(CMAKE_AUTOMOC <span class="hljs-keyword">ON</span>)<br><span class="hljs-keyword">set</span>(CMAKE_AUTORCC <span class="hljs-keyword">ON</span>)<br><br><span class="hljs-keyword">set</span>(CMAKE_CXX_STANDARD <span class="hljs-number">17</span>)<br><span class="hljs-keyword">set</span>(CMAKE_CXX_STANDARD_REQUIRED <span class="hljs-keyword">ON</span>)<br><br><span class="hljs-keyword">find_package</span>(Qt6 REQUIRED Widgets Multimedia MultimediaWidgets NetWork)<br><br><span class="hljs-keyword">set</span>(PROJECT_SOURCES<br>        main.cpp<br>        mainwindow.cpp<br>        mainwindow.h<br>        mainwindow.ui<br>)<br><br><span class="hljs-keyword">add_executable</span>(<span class="hljs-variable">$&#123;PROJECT_NAME&#125;</span> <span class="hljs-variable">$&#123;PROJECT_SOURCES&#125;</span><br>    <span class="hljs-keyword">include</span>/ElaWidgetTools.qrc <span class="hljs-comment">#这里添加了</span><br>    res.qrc)<br><span class="hljs-comment">#这里添加了</span><br><br><span class="hljs-keyword">include_directories</span>(<br>    <span class="hljs-keyword">include</span><br>)<br><br><span class="hljs-keyword">target_link_libraries</span>(<span class="hljs-variable">$&#123;PROJECT_NAME&#125;</span> PRIVATE Qt6::Widgets Qt6::Multimedia Qt6::MultimediaWidgets Qt6::Network<br>    <span class="hljs-variable">$&#123;CMAKE_CURRENT_SOURCE_DIR&#125;</span>/lib/elawidgettools.lib<span class="hljs-comment">#这里添加了</span><br><br>)<br></code></pre></td></tr></table></figure><p>可以这样修改main.cpp来测试是否成功</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-comment">//#include &quot;mainwindow.h&quot;</span><br><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;QApplication&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;ElaApplication.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;ElaWindow.h&quot;</span></span><br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-type">int</span> argc, <span class="hljs-type">char</span> *argv[])</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-function">QApplication <span class="hljs-title">a</span><span class="hljs-params">(argc, argv)</span></span>;<br>    ElaApplication::<span class="hljs-built_in">getInstance</span>()-&gt;<span class="hljs-built_in">init</span>();<br>    ElaWindow w;<br>    w.<span class="hljs-built_in">show</span>();<br>    <span class="hljs-keyword">return</span> a.<span class="hljs-built_in">exec</span>();<br>&#125;<br></code></pre></td></tr></table></figure><p>如果没问题的话应该会有这个界面<br><img src="/img/3.png" alt="3"></p><h2 id="在项目中使用-1"><a href="#在项目中使用-1" class="headerlink" title="在项目中使用"></a>在项目中使用</h2><h3 id="窗口修改"><a href="#窗口修改" class="headerlink" title="窗口修改"></a>窗口修改</h3><p>.h中在添加头文件的基础上把</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">MainWindow</span> : <span class="hljs-keyword">public</span> QMainWindow<br></code></pre></td></tr></table></figure><p>修改为</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">MainWindow</span> : <span class="hljs-keyword">public</span> ElaWidget 或者 ElaWindow<br></code></pre></td></tr></table></figure><p>即可，widget和window看自己需求</p><p>当然cpp里也要修改为Ela</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs C++">MainWindow::<span class="hljs-built_in">MainWindow</span>(QWidget *parent)<br>    : <span class="hljs-built_in">ElaWindow</span>(parent) <span class="hljs-comment">//此处修改</span><br>    , <span class="hljs-built_in">ui</span>(<span class="hljs-keyword">new</span> Ui::MainWindow)<br>&#123;<br>    ui-&gt;<span class="hljs-built_in">setupUi</span>(<span class="hljs-keyword">this</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>之后需要在main.cpp中初始化</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;mainwindow.h&quot;</span></span><br><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;QApplication&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;ElaApplication.h&quot;</span></span><br><br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-type">int</span> argc, <span class="hljs-type">char</span> *argv[])</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-function">QApplication <span class="hljs-title">a</span><span class="hljs-params">(argc, argv)</span></span>;<br>    MainWindow w;<br>    w.<span class="hljs-built_in">show</span>();<br>    eApp-&gt;<span class="hljs-built_in">init</span>(); <span class="hljs-comment">//初始化</span><br>    <span class="hljs-keyword">return</span> a.<span class="hljs-built_in">exec</span>();<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="使用控件"><a href="#使用控件" class="headerlink" title="使用控件"></a>使用控件</h3><p>控件的使用除了在cpp里创建外，部分控件（有继承关系的话）还可以用界面设计中的“提升为”功能</p><p><img src="/img/4.png" alt="4"></p>]]></content>
    
    
    
    <tags>
      
      <tag>Qt</tag>
      
      <tag>C++</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>如何创建一个这样的博客</title>
    <link href="/2024/10/22/CreateAHexo/"/>
    <url>/2024/10/22/CreateAHexo/</url>
    
    <content type="html"><![CDATA[<p>介绍一下这个博客是如何创建出来的</p><span id="more"></span><h1 id="如何创建"><a href="#如何创建" class="headerlink" title="如何创建"></a>如何创建</h1><p>参考的是这样的一篇博客<br><a href="https://blog.csdn.net/yaorongke/article/details/119089190">创建教程</a></p><h1 id="主题配置"><a href="#主题配置" class="headerlink" title="主题配置"></a>主题配置</h1><p><a href="https://hexo.fluid-dev.com/docs/">Fluid文档</a></p><h1 id="一些快速配置"><a href="#一些快速配置" class="headerlink" title="一些快速配置"></a>一些快速配置</h1><h2 id="添加文章"><a href="#添加文章" class="headerlink" title="添加文章"></a>添加文章</h2><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs actionscript">hexo <span class="hljs-keyword">new</span> 文章文件名<br></code></pre></td></tr></table></figure><h2 id="post和更新"><a href="#post和更新" class="headerlink" title="post和更新"></a>post和更新</h2><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css">hexo <span class="hljs-selector-tag">g</span> -d<br></code></pre></td></tr></table></figure><h1 id="一些问题"><a href="#一些问题" class="headerlink" title="一些问题"></a>一些问题</h1><h2 id="配置文件不更新"><a href="#配置文件不更新" class="headerlink" title="配置文件不更新"></a>配置文件不更新</h2><p>有的时候会遇到配置文件更新了不显示，这里就需要使用命令</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs css">hexo <span class="hljs-selector-tag">g</span><br>hexo d<br></code></pre></td></tr></table></figure><p>来重新部署</p><h2 id="push的时候报fatal-unable-to-access"><a href="#push的时候报fatal-unable-to-access" class="headerlink" title="push的时候报fatal: unable to access"></a>push的时候报fatal: unable to access</h2><p>经典的github走错代理，使用命令来指定端口</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs stylus">git config <span class="hljs-attr">--global</span> https<span class="hljs-selector-class">.proxy</span> http:<span class="hljs-comment">//127.0.0.1:7897</span><br>git config <span class="hljs-attr">--global</span> http<span class="hljs-selector-class">.proxy</span> http:<span class="hljs-comment">//127.0.0.1:7897</span><br></code></pre></td></tr></table></figure><h2 id="关于网站样式的修改"><a href="#关于网站样式的修改" class="headerlink" title="关于网站样式的修改"></a>关于网站样式的修改</h2><p>样式修改需要手动删除目录下的public后再进行push</p>]]></content>
    
    
    
    <tags>
      
      <tag>博客</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
